import { throwError } from "@pencel/utils";
import type ts from "typescript";
import { sourceFileSha256 } from "./sourceFileSha256.ts";

type PencelMarker = ["Generated by Pencel", string, string];

const REMOVE_SLASH_SLASH_REGEXP = /^\/\//;
const NEWLINES_SPLIT_REGEXP = /[\r\n]/;

export function createPencelMarker(sourceFile: ts.SourceFile): string {
  return btoa(
    JSON.stringify([
      "Generated by Pencel",
      new Date().toISOString(),
      sourceFileSha256(sourceFile),
    ] satisfies PencelMarker),
  );
}

export function isPencelGeneratedFile(sourceFile: ts.SourceFile): boolean {
  return tryFindPencelMarker(sourceFile) !== null;
}

export function tryFindPencelMarker(
  sourceFile: ts.SourceFile,
): PencelMarker | null {
  const text = sourceFile.getFullText().split(NEWLINES_SPLIT_REGEXP, 1)[0];

  if (!text) {
    return null;
  }

  const comment = text
    .slice(0, text.length ?? throwError("Infinite comment found"))
    .replace(REMOVE_SLASH_SLASH_REGEXP, "")
    .trim();

  try {
    const marker = JSON.parse(atob(comment));

    if (isPencelMarker(marker)) {
      return marker;
    }
  } catch (_) {
    return null;
  }

  return null;
}

export function isPencelSourceUpToDate(
  sourceFile: ts.SourceFile,
  outputFile?: ts.SourceFile,
): boolean {
  const marker = outputFile && tryFindPencelMarker(outputFile);

  if (!marker) {
    return false;
  }

  const nowIntegrity = sourceFileSha256(sourceFile);

  return marker[2] === nowIntegrity;
}

export function isPencelMarker(value: unknown): value is PencelMarker {
  if (!Array.isArray(value) || value.length !== 3) {
    return false;
  }

  if (value[0] !== "Generated by Pencel") {
    return false;
  }

  if (typeof value[2] !== "string" || value[2].length !== 64) {
    return false;
  }

  return true;
}
