import { mkdir, writeFile } from "node:fs/promises";
import { basename, dirname, resolve } from "node:path";
import { createLog } from "@pencel/utils";
import { file } from "ts-flattered";
import { CompilerContext } from "../compiler/core/compiler-context.ts";
import { inject } from "../compiler/core/container.ts";
import { Plugins } from "../compiler/core/plugin.ts";
import { PLUGIN_SKIP } from "../compiler/types/plugins.ts";
import { perf } from "../compiler/utils/perf.ts";

const log = createLog("Angular");

Plugins.register(
  "angular",
  {
    enabled: true,
    proxyFile: "out/angular/components.ts",
  },
  (options) => {
    if (!options.enabled) {
      return Promise.resolve(null);
    }

    log("Using Angular target");

    const context = inject(CompilerContext);

    const fullPath = resolve(context.cwd, options.proxyFile);

    const sf = file({
      content: `// auto-generated by pencel at ${new Date().toISOString()}\n`,
      fileName: basename(options.proxyFile),
    });

    return Promise.resolve({
      write: async () => {
        perf.start("angular:print");
        const printed = await sf.print({
          biome: {
            projectDir: context.cwd,
          },
        });
        perf.end("angular:print");

        perf.start("angular:write");
        await mkdir(dirname(fullPath), { recursive: true });
        await writeFile(fullPath, printed);
        perf.end("angular:write");

        //   // Get the directory of the current SCSS file to resolve relative imports
        //   const fileDir = dirname(handle.path);

        //   const result = await sass.compileStringAsync(handle.input, {
        //     ...options.scssOptions,
        //     loadPaths: [fileDir, ...(options.scssOptions?.loadPaths || [])],
        //   });
      },
      transform: async (handle) => {
        if (handle.aspect === "codegen") {
          log(`Adding proxy for ${handle.input.fileName}`);

          return Promise.resolve(handle.input);
        }

        return Promise.resolve(PLUGIN_SKIP);
      },
    });
  },
);
